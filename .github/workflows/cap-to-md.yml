name: "CAP Issue → Markdown PR"


on:
issues:
types: [opened]


permissions:
contents: write
pull-requests: write
issues: read


jobs:
build-cap-md:
if: contains(github.event.issue.labels.*.name, 'CAP')
runs-on: ubuntu-latest
steps:
- name: Check out
uses: actions/checkout@v4


- name: Generate CAP markdown from Issue Form
id: gen
uses: actions/github-script@v7
with:
script: |
const issue = context.payload.issue;
const body = issue.body || '';


// Helper: extract a block between headings like `### Field` ... next `###` or EOF
function getBlock(label) {
const pattern = new RegExp(`(^|\n)###\\s+${label}\\s*\n([\s\S]*?)(?=\n### |$)`, 'i');
const m = body.match(pattern);
return m ? m[2].trim() : '';
}


// Retrieve fields (IDs in the form become "### <label>")
const cap = getBlock('CAP') || '0000';
if (!/^\d{4}$/.test(cap)) core.setFailed(`CAP number must be four digits, got: ${cap}`);


const title = getBlock('Title');
const category = getBlock('Category') || 'Guardrails';
const status = getBlock('Status') || 'Draft';


// Multi-line lists → array (one per line, strip bullets)
const toList = (txt) => txt
.split(/\r?\n/)
.map(s => s.replace(/^[-*]\s*/, '').trim())
.filter(Boolean);


const authors = toList(getBlock('Authors'));
const implementors = toList(getBlock('Implementors'));
const solutionTo = toList(getBlock('Solution-To \(CIS references\)'))
.concat(toList(getBlock('Solution-To'))); // fallback
const discussions = toList(getBlock('Discussions \(URLs\)')).concat(toList(getBlock('Discussions')));


const abstract = getBlock('Abstract');
const motivation = getBlock('Motivation: Why is this CAP necessary\?') || getBlock('Motivation');
const spec = getBlock('Amendment Specification \(canonical text\)') || getBlock('Amendment Specification');
const rationale = getBlock('Rationale: How does this CAP achieve its goals\?') || getBlock('Rationale');
const acceptance = getBlock('Path to Ratification — Acceptance Criteria') || getBlock('Acceptance Criteria');
const implementation = getBlock('Path to Ratification — Implementation Plan') || getBlock('Implementation Plan');
const versioning = getBlock('Versioning \(Optional\)') || getBlock('Versioning');
const references = getBlock('References \(Optional\)') || getBlock('References');


const created = new Date().toISOString().slice(0,10);
const license = 'CC-BY-4.0';
delete-branch: false
