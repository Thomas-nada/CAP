Below are the drop-in files you can add to your repo to turn a GitHub **Issue Form** into a **Markdown CAP file** via a pull request. It covers:

1. A structured Issue Form
2. A GitHub Action that parses the form responses, generates the MD file with your exact template, and opens a PR

---

## 1) `.github/ISSUE_TEMPLATE/cap.yml`

```yaml
name: "New CAP (Constitutional Amendment Proposal)"
description: "Propose a new CAP via a structured form. Generates a CAP-XXXX.md file via PR."
title: "CAP-XXXX: <short descriptive title>"
labels:
  - CAP
body:
  - type: input
    id: cap_number
    attributes:
      label: CAP
      description: "Four digits, e.g. 0001"
      placeholder: "0001"
    validations:
      required: true

  - type: input
    id: title
    attributes:
      label: Title
      description: "Title of the Constitutional Amendment Proposal"
      placeholder: "[Title of the Constitutional Amendment Proposal]"
    validations:
      required: true

  - type: dropdown
    id: category
    attributes:
      label: Category
      description: "Choose one category"
      options:
        - Guardrails
        - Meta
        - Constitution
        - Standards
    validations:
      required: true

  - type: dropdown
    id: status
    attributes:
      label: Status
      options:
        - Draft
        - Review
        - Ratified
        - Withdrawn
    validations:
      required: true

  - type: textarea
    id: authors
    attributes:
      label: Authors
      description: "One per line, e.g. Name <@GitHubHandle>"
      placeholder: |
        Ada Lovelace <@ada>
        Charles Babbage <@babbage>
      render: text
    validations:
      required: true

  - type: textarea
    id: implementors
    attributes:
      label: Implementors
      description: "One per line. Use 'N/A' if none."
      placeholder: |
        N/A
      render: text
    validations:
      required: true

  - type: textarea
    id: solution_to
    attributes:
      label: Solution-To (CIS references)
      description: "One per line, e.g. CIS-0001"
      placeholder: |
        CIS-0001
      render: text

  - type: textarea
    id: discussions
    attributes:
      label: Discussions (URLs)
      description: "One per line (GitHub Discussions or relevant links)"
      placeholder: |
        https://github.com/[org]/CAP/discussions/123
      render: text

  - type: textarea
    id: abstract
    attributes:
      label: Abstract
      description: "~200 words summarizing the amendment and governance issue."
      placeholder: "A short (~200 words) summary ..."
      render: markdown
    validations:
      required: true

  - type: textarea
    id: motivation
    attributes:
      label: Motivation: Why is this CAP necessary?
      description: "Explain the governance problem, stakeholders, and links to CIS."
      render: markdown
    validations:
      required: true

  - type: textarea
    id: spec
    attributes:
      label: Amendment Specification (canonical text)
      description: "Provide the exact text of the proposed constitutional change or addition."
      render: markdown
    validations:
      required: true

  - type: textarea
    id: rationale
    attributes:
      label: Rationale: How does this CAP achieve its goals?
      render: markdown
    validations:
      required: true

  - type: textarea
    id: acceptance
    attributes:
      label: Path to Ratification - Acceptance Criteria
      render: markdown

  - type: textarea
    id: implementation
    attributes:
      label: Path to Ratification - Implementation Plan
      render: markdown

  - type: textarea
    id: versioning
    attributes:
      label: Versioning (Optional)
      render: markdown

  - type: textarea
    id: references
    attributes:
      label: References (Optional)
      render: markdown

  - type: checkboxes
    id: confirm
    attributes:
      label: Confirmation
      options:
        - label: "I confirm the CAP number is four digits (e.g., 0001) and unique."
          required: true
```

---

## 2) `.github/workflows/cap-to-md.yml`

This workflow triggers when a **new issue** with the `CAP` label is opened. It parses the Issue Form, builds the Markdown with your exact front matter and section headings, creates a new branch, and opens a PR that adds `caps/CAP-XXXX.md`.

```yaml
name: "CAP Issue → Markdown PR"

on:
  issues:
    types: [opened]

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  build-cap-md:
    if: contains(github.event.issue.labels.*.name, 'CAP')
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Generate CAP markdown from Issue Form
        id: gen
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';

            // Helper: extract a block between headings like `### Field` ... next `###` or EOF
            function getBlock(label) {
              const pattern = new RegExp(`(^|\n)###\\s+${label}\\s*\n([\s\S]*?)(?=\n### |$)`, 'i');
              const m = body.match(pattern);
              return m ? m[2].trim() : '';
            }

            // Retrieve fields (IDs in the form become "### <label>")
            const cap = getBlock('CAP') || '0000';
            if (!/^\d{4}$/.test(cap)) core.setFailed(`CAP number must be four digits, got: ${cap}`);

            const title = getBlock('Title');
            const category = getBlock('Category') || 'Guardrails';
            const status = getBlock('Status') || 'Draft';

            // Multi-line lists → array (one per line, strip bullets)
            const toList = (txt) => txt
              .split(/\r?\n/)
              .map(s => s.replace(/^[-*]\s*/, '').trim())
              .filter(Boolean);

            const authors = toList(getBlock('Authors'));
            const implementors = toList(getBlock('Implementors'));
            const solutionTo = toList(getBlock('Solution-To \(CIS references\)'))
              .concat(toList(getBlock('Solution-To'))); // fallback
            const discussions = toList(getBlock('Discussions \(URLs\)')).concat(toList(getBlock('Discussions')));

            const abstract = getBlock('Abstract');
            const motivation = getBlock('Motivation: Why is this CAP necessary\?') || getBlock('Motivation');
            const spec = getBlock('Amendment Specification \(canonical text\)') || getBlock('Amendment Specification');
            const rationale = getBlock('Rationale: How does this CAP achieve its goals\?') || getBlock('Rationale');
            const acceptance = getBlock('Path to Ratification — Acceptance Criteria') || getBlock('Acceptance Criteria');
            const implementation = getBlock('Path to Ratification — Implementation Plan') || getBlock('Implementation Plan');
            const versioning = getBlock('Versioning \(Optional\)') || getBlock('Versioning');
            const references = getBlock('References \(Optional\)') || getBlock('References');

            const created = new Date().toISOString().slice(0,10);
            const license = 'CC-BY-4.0';

            // Front matter lists as YAML arrays
            function yamlArray(items) {
              if (!items || items.length === 0) return '  - "N/A"';
              return items.map(v => `  - "${v.replace(/"/g, '\\"')}"`).join('\n');
            }

            // Build markdown content
            const md = `---\n`+
`CAP: ${cap}\n`+
`Title: "${title.replace(/"/g, '\\"')}"\n`+
`Category: "${category}"\n`+
`Status: "${status}"\n`+
`Authors:\n${yamlArray(authors)}\n`+
`Implementors:\n${yamlArray(implementors)}\n`+
`Solution-To:\n${yamlArray(solutionTo)}\n`+
`Discussions:\n${yamlArray(discussions)}\n`+
`Created: "${created}"\n`+
`License: "${license}"\n`+
`---\n\n`+
`## Abstract\n\n${abstract}\n\n---\n\n`+
`## Motivation: Why is this CAP necessary?\n\n${motivation}\n\n---\n\n`+
`## Amendment Specification\n\n${spec}\n\n---\n\n`+
`## Rationale: How does this CAP achieve its goals?\n\n${rationale}\n\n---\n\n`+
`## Path to Ratification\n\n### Acceptance Criteria\n\n${acceptance || ''}\n\n### Implementation Plan\n\n${implementation || ''}\n\n---\n\n`+
`## Versioning (Optional)\n\n${versioning || ''}\n\n---\n\n`+
`## References (Optional)\n\n${references || ''}\n\n---\n\n`+
`## Copyright\n\nThis CAP is licensed under [CC-BY-4.0](https://creativecommons.org/licenses/by/4.0/legalcode).\n`;

            // File path and branch
            const branch = `cap/${cap}`;
            const filePath = `caps/CAP-${cap}.md`;

            core.setOutput('branch', branch);
            core.setOutput('filePath', filePath);
            core.setOutput('content', md);

      - name: Create branch and commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b "${{ steps.gen.outputs.branch }}"
          mkdir -p "$(dirname "${{ steps.gen.outputs.filePath }}")"
          printf "%s" "${{ steps.gen.outputs.content }}" > "${{ steps.gen.outputs.filePath }}"
          git add "${{ steps.gen.outputs.filePath }}"
          git commit -m "Add CAP ${{ steps.gen.outputs.filePath }} from issue #${{ github.event.issue.number }}"
          git push --set-upstream origin "${{ steps.gen.outputs.branch }}"

      - name: Open Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Add ${{ steps.gen.outputs.filePath }}"
          body: |
            This PR was auto-generated from [issue #${{ github.event.issue.number }}](${{ github.event.issue.html_url }}).

            - CAP number: `${{ steps.gen.outputs.branch }}`
            - File: `${{ steps.gen.outputs.filePath }}`
          branch: ${{ steps.gen.outputs.branch }}
          delete-branch: false
```

---

## 3) Optional: enforce CAP number uniqueness

Add a quick validation job that fails if `caps/CAP-<number>.md` already exists.

```yaml
      - name: Fail if CAP already exists
        run: |
          if [ -f "${{ steps.gen.outputs.filePath }}" ]; then
            echo "CAP number already exists: ${{ steps.gen.outputs.filePath }}" >&2
            exit 1
          fi
```

Insert this step just **before** the "Create branch and commit" step.

---

## Usage

1. Commit both files to your default branch.
2. Open a new issue with the **New CAP** template.
3. On submission, the workflow will open a PR adding `caps/CAP-XXXX.md` populated with your content and this exact structure.

> Notes
>
> * The **Created** date is set automatically by the workflow (YYYY-MM-DD, UTC).
> * Lists (Authors, Implementors, Solution-To, Discussions) are treated as one item per line.
> * License is fixed to `CC-BY-4.0` in front matter and reiterated at the bottom as specified.
> * You can tweak output path (e.g., `CAPS/` vs `caps/`) or add additional labels/reviewers in the PR step.
